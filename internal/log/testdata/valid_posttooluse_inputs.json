[
  {
    "name": "the-architect_complete_standard",
    "description": "Standard architect completion with moderate output",
    "input": {
      "session_id": "dev-arch-complete-001",
      "transcript_path": "/path/to/transcript.jsonl",
      "cwd": "/project/root",
      "hook_event_name": "PostToolUse",
      "tool_name": "Task",
      "tool_input": {
        "description": "Design microservices architecture",
        "prompt": "SessionId: dev-arch-complete-001 AgentId: arch-complete-001\n\nDesign a scalable microservices architecture for an e-commerce platform.",
        "subagent_type": "the-architect"
      },
      "output": "I've designed a comprehensive microservices architecture with the following components:\n\n1. **User Service**: Handles authentication, user profiles, and preferences\n2. **Product Service**: Manages product catalog, inventory, and search\n3. **Order Service**: Processes orders, order history, and order status\n4. **Payment Service**: Integrates with multiple payment gateways\n5. **Inventory Service**: Real-time inventory management across warehouses\n6. **Notification Service**: Email, SMS, and push notifications\n7. **Analytics Service**: User behavior tracking and business intelligence\n\nThe architecture uses API Gateway for request routing, Redis for caching, and implements circuit breaker pattern for resilience."
    }
  },
  {
    "name": "the-developer_complete_with_code",
    "description": "Developer completion with code examples",
    "input": {
      "session_id": "dev-dev-complete-002",
      "transcript_path": "/path/to/transcript.jsonl",
      "cwd": "/project/root",
      "hook_event_name": "PostToolUse",
      "tool_name": "Task",
      "tool_input": {
        "description": "Implement JWT authentication",
        "prompt": "SessionId: dev-dev-complete-002 AgentId: dev-complete-002\n\nImplement JWT authentication with Go and Gin framework.",
        "subagent_type": "the-developer"
      },
      "output": "JWT authentication implementation completed successfully:\n\n```go\nfunc LoginHandler(c *gin.Context) {\n    var loginReq LoginRequest\n    if err := c.ShouldBindJSON(&loginReq); err != nil {\n        c.JSON(400, gin.H{\"error\": \"Invalid request\"})\n        return\n    }\n    \n    user, err := AuthenticateUser(loginReq.Email, loginReq.Password)\n    if err != nil {\n        c.JSON(401, gin.H{\"error\": \"Invalid credentials\"})\n        return\n    }\n    \n    token, err := GenerateJWTToken(user)\n    if err != nil {\n        c.JSON(500, gin.H{\"error\": \"Token generation failed\"})\n        return\n    }\n    \n    c.JSON(200, gin.H{\"token\": token, \"user\": user})\n}\n```\n\nImplemented features:\n- Password bcrypt hashing\n- JWT token generation and validation\n- Rate limiting middleware\n- Role-based access control\n- Token refresh mechanism\n\nAll endpoints are secured and tested."
    }
  },
  {
    "name": "the-tester_complete_test_results",
    "description": "Tester completion with detailed test results",
    "input": {
      "session_id": "dev-test-complete-003",
      "transcript_path": "/path/to/transcript.jsonl",
      "cwd": "/project/root",
      "hook_event_name": "PostToolUse",
      "tool_name": "Task",
      "tool_input": {
        "description": "Run comprehensive test suite",
        "prompt": "SessionId: dev-test-complete-003 AgentId: test-complete-003\n\nExecute comprehensive test suite for authentication module.",
        "subagent_type": "the-tester"
      },
      "output": "Test suite execution completed with the following results:\n\n**Unit Tests**: 47/47 passed ✅\n- AuthService: 15/15 tests passed\n- JWTService: 12/12 tests passed  \n- UserRepository: 10/10 tests passed\n- ValidationService: 10/10 tests passed\n\n**Integration Tests**: 23/23 passed ✅\n- API Endpoints: 15/15 tests passed\n- Database Operations: 8/8 tests passed\n\n**End-to-End Tests**: 12/12 passed ✅\n- User Registration Flow: 4/4 tests passed\n- Login/Logout Flow: 4/4 tests passed\n- Password Reset Flow: 4/4 tests passed\n\n**Performance Tests**: ✅\n- Login endpoint: avg 45ms, 95th percentile 78ms\n- Token validation: avg 2ms, 95th percentile 5ms\n- Concurrent users: 1000 users handled successfully\n\n**Security Tests**: 8/8 passed ✅\n- SQL Injection prevention: ✅\n- XSS prevention: ✅\n- CSRF protection: ✅\n- Rate limiting: ✅\n\n**Code Coverage**: 94.2%\n\nAll tests passed successfully. System is ready for deployment."
    }
  },
  {
    "name": "truncated_output_test",
    "description": "Agent with very long output to test truncation (>1000 chars)",
    "input": {
      "session_id": "dev-truncate-004",
      "transcript_path": "/path/to/transcript.jsonl",
      "cwd": "/project/root",
      "hook_event_name": "PostToolUse",
      "tool_name": "Task",
      "tool_input": {
        "description": "Generate comprehensive documentation",
        "prompt": "SessionId: dev-truncate-004 AgentId: doc-004\n\nGenerate detailed documentation for the system.",
        "subagent_type": "the-documenter"
      },
      "output": "I've generated comprehensive documentation for the entire system. This documentation includes detailed API specifications, architecture diagrams, deployment guides, security considerations, performance benchmarks, troubleshooting guides, and maintenance procedures. Each section provides thorough explanations with examples, code snippets, and best practices. This documentation includes detailed API specifications, architecture diagrams, deployment guides, security considerations, performance benchmarks, troubleshooting guides, and maintenance procedures. Each section provides thorough explanations with examples, code snippets, and best practices. This documentation includes detailed API specifications, architecture diagrams, deployment guides, security considerations, performance benchmarks, troubleshooting guides, and maintenance procedures. Each section provides thorough explanations with examples, code snippets, and best practices. This documentation includes detailed API specifications, architecture diagrams, deployment guides, security considerations, performance benchmarks, troubleshooting guides, and maintenance procedures. Each section provides thorough explanations with examples, code snippets, and best practices. The documentation is now complete and ready for team review and publication."
    }
  },
  {
    "name": "unicode_output", 
    "description": "Agent with Unicode characters in output",
    "input": {
      "session_id": "dev-unicode-out-005",
      "transcript_path": "/path/to/transcript.jsonl",
      "cwd": "/project/root",
      "hook_event_name": "PostToolUse",
      "tool_name": "Task",
      "tool_input": {
        "description": "Implement i18n with Unicode support",
        "prompt": "SessionId: dev-unicode-out-005 AgentId: i18n-005\n\nImplement internationalization support with Unicode characters.",
        "subagent_type": "the-internationalizer"
      },
      "output": "✅ Internationalization implementation completed successfully!\n\nSupported languages and features:\n🇺🇸 English: Full support with US date/number formats\n🇫🇷 Français: Accents handled (café, résumé, naïve) ✓\n🇪🇸 Español: Special characters (niño, jalapeño) ✓  \n🇩🇪 Deutsch: Umlauts supported (Müller, Größe) ✓\n🇷🇺 Русский: Cyrillic alphabet (Привет мир) ✓\n🇨🇳 中文: Simplified Chinese (你好世界) ✓\n🇯🇵 日本語: Mixed scripts (こんにちは世界) ✓\n🇦🇪 العربية: RTL text support (مرحبا بالعالم) ✓\n\n🎉 Features implemented:\n• Text direction handling (LTR/RTL)\n• Date/time localization\n• Number formatting per locale\n• Currency display\n• Emoji support 🚀✨🌟\n• Unicode normalization\n• Collation rules\n\n💯 All 2,847 test cases passed including edge cases!"
    }
  },
  {
    "name": "special_chars_output",
    "description": "Agent with special characters and escape sequences in output",
    "input": {
      "session_id": "dev-special-out-006", 
      "transcript_path": "/path/to/transcript.jsonl",
      "cwd": "/project/root",
      "hook_event_name": "PostToolUse",
      "tool_name": "Task",
      "tool_input": {
        "description": "Process strings with special characters",
        "prompt": "SessionId: dev-special-out-006 AgentId: special-006\n\nImplement robust string processing for special characters.",
        "subagent_type": "the-sanitizer"
      },
      "output": "String processing implementation completed with robust handling:\n\n1. **Quoted Strings**: \"double quotes\" and 'single quotes' ✓\n2. **Escape Sequences**: \n   - Newlines: \\n → actual newlines\n   - Tabs: \\t → proper indentation\n   - Backslashes: C:\\\\path\\\\to\\\\file ✓\n3. **JSON Processing**: {\"key\": \"value\", \"array\": [1, 2, 3]} ✓\n4. **Security**: \n   - SQL injection blocked: '; DROP TABLE users; -- ✗\n   - XSS prevented: <script>alert('xss')</script> ✗\n5. **Control Characters**: \\u0000-\\u001F handled ✓\n6. **Extended ASCII**: ½ ± ÷ × ° ² supported ✓\n\nAll sanitization tests passed. System is secure against injection attacks."
    }
  },
  {
    "name": "json_in_output",
    "description": "Agent with JSON data in output text",
    "input": {
      "session_id": "dev-json-out-007",
      "transcript_path": "/path/to/transcript.jsonl",
      "cwd": "/project/root", 
      "hook_event_name": "PostToolUse",
      "tool_name": "Task",
      "tool_input": {
        "description": "Process API response data",
        "prompt": "SessionId: dev-json-out-007 AgentId: api-007\n\nProcess and validate API response data.",
        "subagent_type": "the-api-processor"
      },
      "output": "API response processing completed. Sample processed data:\n\n```json\n{\n  \"user\": {\n    \"id\": 12345,\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"roles\": [\"user\", \"admin\"],\n    \"preferences\": {\n      \"theme\": \"dark\",\n      \"language\": \"en-US\",\n      \"notifications\": true\n    }\n  },\n  \"metadata\": {\n    \"timestamp\": \"2024-01-11T15:30:45.123Z\",\n    \"version\": \"1.2.3\",\n    \"status\": \"success\"\n  }\n}\n```\n\nValidation results:\n- Schema validation: ✅\n- Required fields check: ✅  \n- Data type validation: ✅\n- Business rule validation: ✅"
    }
  },
  {
    "name": "multiline_code_output",
    "description": "Agent with multiline code blocks in output",
    "input": {
      "session_id": "dev-code-out-008",
      "transcript_path": "/path/to/transcript.jsonl", 
      "cwd": "/project/root",
      "hook_event_name": "PostToolUse",
      "tool_name": "Task",
      "tool_input": {
        "description": "Generate code examples",
        "prompt": "SessionId: dev-code-out-008 AgentId: code-008\n\nGenerate code examples for database operations.",
        "subagent_type": "the-code-generator"
      },
      "output": "Database operation code examples generated:\n\n**User Repository Implementation:**\n\n```go\npackage repository\n\nimport (\n    \"database/sql\"\n    \"fmt\"\n    \"time\"\n)\n\ntype User struct {\n    ID        int       `json:\"id\" db:\"id\"`\n    Email     string    `json:\"email\" db:\"email\"`\n    Name      string    `json:\"name\" db:\"name\"`\n    CreatedAt time.Time `json:\"created_at\" db:\"created_at\"`\n}\n\ntype UserRepository struct {\n    db *sql.DB\n}\n\nfunc (r *UserRepository) Create(user *User) error {\n    query := `\n        INSERT INTO users (email, name, created_at)\n        VALUES ($1, $2, $3)\n        RETURNING id`\n    \n    err := r.db.QueryRow(query, user.Email, user.Name, time.Now()).\n        Scan(&user.ID)\n    if err != nil {\n        return fmt.Errorf(\"failed to create user: %w\", err)\n    }\n    \n    return nil\n}\n```\n\n**Features implemented:**\n- Prepared statements for security\n- Error handling with context\n- Transaction support\n- Connection pooling optimization"
    }
  },
  {
    "name": "empty_output",
    "description": "Agent with empty output",
    "input": {
      "session_id": "dev-empty-out-009",
      "transcript_path": "/path/to/transcript.jsonl",
      "cwd": "/project/root",
      "hook_event_name": "PostToolUse", 
      "tool_name": "Task",
      "tool_input": {
        "description": "Silent operation task",
        "prompt": "SessionId: dev-empty-out-009 AgentId: silent-009\n\nPerform silent cleanup operation with no output.",
        "subagent_type": "the-cleaner"
      },
      "output": ""
    }
  },
  {
    "name": "whitespace_only_output",
    "description": "Agent with only whitespace in output",
    "input": {
      "session_id": "dev-whitespace-out-010",
      "transcript_path": "/path/to/transcript.jsonl",
      "cwd": "/project/root", 
      "hook_event_name": "PostToolUse",
      "tool_name": "Task",
      "tool_input": {
        "description": "Whitespace handling test",
        "prompt": "SessionId: dev-whitespace-out-010 AgentId: space-010\n\nTest handling of whitespace-only output.",
        "subagent_type": "the-whitespace-tester"
      },
      "output": "   \n\t\n   \n"
    }
  }
]